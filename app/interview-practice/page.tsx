"use client"

import { useState } from "react"
import Link from "next/link"
import { Button } from "@/components/ui/button"
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from "@/components/ui/card"
import { Input } from "@/components/ui/input"
import { Label } from "@/components/ui/label"
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from "@/components/ui/select"
import { Badge } from "@/components/ui/badge"
import { Progress } from "@/components/ui/progress"
import { Alert, AlertDescription } from "@/components/ui/alert"
import { SharedHeader } from "@/components/shared-header"
import {
  MessageSquare,
  Play,
  Square,
  Mic,
  MicOff,
  Camera,
  CameraOff,
  Clock,
  Star,
  TrendingUp,
  Lightbulb,
  CheckCircle,
  AlertCircle,
} from "lucide-react"

const POPULAR_COMPANIES = [
  "Google",
  "Microsoft",
  "Amazon",
  "Meta",
  "Apple",
  "Netflix",
  "Tesla",
  "Spotify",
  "Airbnb",
  "Uber",
  "Stripe",
  "Shopify",
]

const INTERVIEW_TYPES = [
  { value: "technical", label: "Technical Interview", description: "Coding and system design questions" },
  { value: "behavioral", label: "Behavioral Interview", description: "Situational and experience-based questions" },
  { value: "mixed", label: "Mixed Interview", description: "Combination of technical and behavioral" },
]

interface InterviewQuestion {
  id: number
  question: string
  type: "technical" | "behavioral"
  difficulty: "easy" | "medium" | "hard"
  expectedDuration: number
  hints?: string[]
}

interface InterviewSession {
  company: string
  role: string
  type: string
  questions: InterviewQuestion[]
  currentQuestionIndex: number
  responses: { questionId: number; response: string; duration: number }[]
  startTime: Date
  isActive: boolean
}

export default function InterviewPracticePage() {
  const [step, setStep] = useState<"setup" | "interview" | "feedback">("setup")
  const [setupData, setSetupData] = useState({
    company: "",
    role: "",
    interviewType: "",
    customCompany: "",
  })
  const [session, setSession] = useState<InterviewSession | null>(null)
  const [currentResponse, setCurrentResponse] = useState("")
  const [isRecording, setIsRecording] = useState(false)
  const [isCameraOn, setIsCameraOn] = useState(false)
  const [questionStartTime, setQuestionStartTime] = useState<Date | null>(null)

  // Mock interview questions - in real app, these would be generated by AI based on company/role
  const mockQuestions: InterviewQuestion[] = [
    {
      id: 1,
      question: "Tell me about yourself and why you're interested in working at Google as a Software Engineer.",
      type: "behavioral",
      difficulty: "easy",
      expectedDuration: 120,
    },
    {
      id: 2,
      question: "Describe a challenging project you worked on. How did you overcome the difficulties?",
      type: "behavioral",
      difficulty: "medium",
      expectedDuration: 180,
    },
    {
      id: 3,
      question: "How would you design a URL shortener like bit.ly? Walk me through your approach.",
      type: "technical",
      difficulty: "medium",
      expectedDuration: 300,
      hints: ["Think about the database schema", "Consider scalability", "What about analytics?"],
    },
    {
      id: 4,
      question: "Write a function to find the longest palindromic substring in a given string.",
      type: "technical",
      difficulty: "hard",
      expectedDuration: 600,
      hints: ["Consider dynamic programming", "Think about expanding around centers", "What's the time complexity?"],
    },
    {
      id: 5,
      question: "Where do you see yourself in 5 years, and how does this role at Google fit into your career goals?",
      type: "behavioral",
      difficulty: "easy",
      expectedDuration: 120,
    },
  ]

  const startInterview = () => {
    const newSession: InterviewSession = {
      company: setupData.company || setupData.customCompany,
      role: setupData.role,
      type: setupData.interviewType,
      questions: mockQuestions,
      currentQuestionIndex: 0,
      responses: [],
      startTime: new Date(),
      isActive: true,
    }
    setSession(newSession)
    setQuestionStartTime(new Date())
    setStep("interview")
  }

  const submitResponse = () => {
    if (!session || !questionStartTime) return

    const duration = Math.floor((new Date().getTime() - questionStartTime.getTime()) / 1000)
    const currentQuestion = session.questions[session.currentQuestionIndex]

    const newResponse = {
      questionId: currentQuestion.id,
      response: currentResponse,
      duration,
    }

    const updatedSession = {
      ...session,
      responses: [...session.responses, newResponse],
    }

    if (session.currentQuestionIndex < session.questions.length - 1) {
      updatedSession.currentQuestionIndex += 1
      setSession(updatedSession)
      setCurrentResponse("")
      setQuestionStartTime(new Date())
    } else {
      updatedSession.isActive = false
      setSession(updatedSession)
      setStep("feedback")
    }
  }

  const skipQuestion = () => {
    if (!session) return

    if (session.currentQuestionIndex < session.questions.length - 1) {
      setSession({
        ...session,
        currentQuestionIndex: session.currentQuestionIndex + 1,
      })
      setCurrentResponse("")
      setQuestionStartTime(new Date())
    } else {
      setSession({ ...session, isActive: false })
      setStep("feedback")
    }
  }

  const endInterview = () => {
    if (session) {
      setSession({ ...session, isActive: false })
      setStep("feedback")
    }
  }

  const restartInterview = () => {
    setStep("setup")
    setSession(null)
    setCurrentResponse("")
    setSetupData({ company: "", role: "", interviewType: "", customCompany: "" })
  }

  const currentQuestion = session?.questions[session.currentQuestionIndex]
  const progress = session ? ((session.currentQuestionIndex + 1) / session.questions.length) * 100 : 0

  // Mock feedback data
  const mockFeedback = {
    overallScore: 78,
    strengths: [
      "Clear communication and structured responses",
      "Good technical knowledge demonstrated",
      "Showed enthusiasm for the role and company",
    ],
    improvements: [
      "Provide more specific examples with quantifiable results",
      "Practice explaining complex technical concepts more simply",
      "Work on time management - some responses were too lengthy",
    ],
    questionScores: [
      { questionId: 1, score: 85, feedback: "Great introduction, showed passion for the company" },
      { questionId: 2, score: 75, feedback: "Good example, but could use more specific metrics" },
      { questionId: 3, score: 70, feedback: "Solid approach, but missed some scalability considerations" },
      { questionId: 4, score: 80, feedback: "Correct solution, good explanation of time complexity" },
      { questionId: 5, score: 82, feedback: "Realistic goals, well-aligned with company growth" },
    ],
  }

  return (
    <div className="min-h-screen bg-gradient-to-br from-background via-muted/30 to-background">
      <SharedHeader />

      <div className="container mx-auto px-4 py-8">
        <div className="max-w-4xl mx-auto">
          {step === "setup" && (
            <>
              {/* Page Header */}
              <div className="text-center mb-8">
                <h1 className="text-3xl font-bold mb-2">AI Interview Practice</h1>
                <p className="text-muted-foreground">
                  Practice with our AI interviewer that asks company and role-specific questions
                </p>
              </div>

              <Card className="shadow-lg">
                <CardHeader>
                  <CardTitle className="flex items-center gap-2">
                    <MessageSquare className="w-6 h-6" />
                    Setup Your Interview
                  </CardTitle>
                  <CardDescription>Configure your interview session to get the most relevant questions</CardDescription>
                </CardHeader>
                <CardContent className="space-y-6">
                  <div className="grid md:grid-cols-2 gap-6">
                    <div className="space-y-4">
                      <div className="space-y-2">
                        <Label htmlFor="company">Target Company</Label>
                        <Select onValueChange={(value) => setSetupData({ ...setupData, company: value })}>
                          <SelectTrigger>
                            <SelectValue placeholder="Select a company" />
                          </SelectTrigger>
                          <SelectContent>
                            {POPULAR_COMPANIES.map((company) => (
                              <SelectItem key={company} value={company}>
                                {company}
                              </SelectItem>
                            ))}
                            <SelectItem value="other">Other (specify below)</SelectItem>
                          </SelectContent>
                        </Select>
                      </div>

                      {setupData.company === "other" && (
                        <div className="space-y-2">
                          <Label htmlFor="customCompany">Company Name</Label>
                          <Input
                            id="customCompany"
                            placeholder="Enter company name"
                            value={setupData.customCompany}
                            onChange={(e) => setSetupData({ ...setupData, customCompany: e.target.value })}
                          />
                        </div>
                      )}

                      <div className="space-y-2">
                        <Label htmlFor="role">Target Role</Label>
                        <Input
                          id="role"
                          placeholder="e.g., Software Engineer, Product Manager"
                          value={setupData.role}
                          onChange={(e) => setSetupData({ ...setupData, role: e.target.value })}
                        />
                      </div>
                    </div>

                    <div className="space-y-4">
                      <div className="space-y-2">
                        <Label>Interview Type</Label>
                        <div className="space-y-2">
                          {INTERVIEW_TYPES.map((type) => (
                            <Card
                              key={type.value}
                              className={`cursor-pointer transition-colors ${
                                setupData.interviewType === type.value
                                  ? "border-primary bg-primary/5"
                                  : "hover:border-primary/50"
                              }`}
                              onClick={() => setSetupData({ ...setupData, interviewType: type.value })}
                            >
                              <CardContent className="p-4">
                                <div className="flex items-center gap-3">
                                  <div
                                    className={`w-4 h-4 rounded-full border-2 ${
                                      setupData.interviewType === type.value
                                        ? "border-primary bg-primary"
                                        : "border-muted-foreground"
                                    }`}
                                  />
                                  <div>
                                    <div className="font-medium">{type.label}</div>
                                    <div className="text-sm text-muted-foreground">{type.description}</div>
                                  </div>
                                </div>
                              </CardContent>
                            </Card>
                          ))}
                        </div>
                      </div>
                    </div>
                  </div>

                  <div className="text-center pt-6">
                    <Button
                      onClick={startInterview}
                      disabled={
                        !setupData.role || !setupData.interviewType || (!setupData.company && !setupData.customCompany)
                      }
                      size="lg"
                      className="px-8"
                    >
                      <Play className="w-4 h-4 mr-2" />
                      Start Interview
                    </Button>
                  </div>

                  {/* Features */}
                  <div className="grid md:grid-cols-3 gap-4 pt-6 border-t">
                    <div className="text-center">
                      <MessageSquare className="w-8 h-8 text-primary mx-auto mb-2" />
                      <h3 className="font-semibold mb-1">AI-Powered Questions</h3>
                      <p className="text-sm text-muted-foreground">
                        Get questions tailored to your target company and role
                      </p>
                    </div>
                    <div className="text-center">
                      <Clock className="w-8 h-8 text-primary mx-auto mb-2" />
                      <h3 className="font-semibold mb-1">Real-time Feedback</h3>
                      <p className="text-sm text-muted-foreground">Receive instant feedback on your responses</p>
                    </div>
                    <div className="text-center">
                      <TrendingUp className="w-8 h-8 text-primary mx-auto mb-2" />
                      <h3 className="font-semibold mb-1">Performance Analytics</h3>
                      <p className="text-sm text-muted-foreground">Track your progress and improvement areas</p>
                    </div>
                  </div>
                </CardContent>
              </Card>
            </>
          )}

          {step === "interview" && session && currentQuestion && (
            <>
              {/* Interview Header */}
              <div className="mb-6">
                <div className="flex items-center justify-between mb-4">
                  <div>
                    <h1 className="text-2xl font-bold">
                      {session.company} - {session.role}
                    </h1>
                    <p className="text-muted-foreground">
                      Question {session.currentQuestionIndex + 1} of {session.questions.length}
                    </p>
                  </div>
                  <div className="flex items-center gap-2">
                    <Button variant="outline" size="sm" onClick={skipQuestion}>
                      Skip Question
                    </Button>
                    <Button variant="outline" size="sm" onClick={endInterview}>
                      <Square className="w-4 h-4 mr-2" />
                      End Interview
                    </Button>
                  </div>
                </div>
                <Progress value={progress} className="h-2" />
              </div>

              <div className="grid lg:grid-cols-3 gap-6">
                {/* Main Interview Area */}
                <div className="lg:col-span-2 space-y-6">
                  {/* Question Card */}
                  <Card className="shadow-lg">
                    <CardHeader>
                      <div className="flex items-center justify-between">
                        <CardTitle className="flex items-center gap-2">
                          <MessageSquare className="w-5 h-5" />
                          Interview Question
                        </CardTitle>
                        <div className="flex items-center gap-2">
                          <Badge variant={currentQuestion.type === "technical" ? "default" : "secondary"}>
                            {currentQuestion.type}
                          </Badge>
                          <Badge
                            variant="outline"
                            className={
                              currentQuestion.difficulty === "hard"
                                ? "border-red-200 text-red-600"
                                : currentQuestion.difficulty === "medium"
                                  ? "border-yellow-200 text-yellow-600"
                                  : "border-green-200 text-green-600"
                            }
                          >
                            {currentQuestion.difficulty}
                          </Badge>
                        </div>
                      </div>
                    </CardHeader>
                    <CardContent>
                      <p className="text-lg mb-4">{currentQuestion.question}</p>
                      {currentQuestion.hints && (
                        <Alert>
                          <Lightbulb className="w-4 h-4" />
                          <AlertDescription>
                            <strong>Hints:</strong>
                            <ul className="list-disc list-inside mt-1">
                              {currentQuestion.hints.map((hint, index) => (
                                <li key={index}>{hint}</li>
                              ))}
                            </ul>
                          </AlertDescription>
                        </Alert>
                      )}
                    </CardContent>
                  </Card>

                  {/* Response Area */}
                  <Card className="shadow-lg">
                    <CardHeader>
                      <CardTitle>Your Response</CardTitle>
                      <CardDescription>
                        Expected duration: {Math.floor(currentQuestion.expectedDuration / 60)} minutes
                      </CardDescription>
                    </CardHeader>
                    <CardContent className="space-y-4">
                      <textarea
                        className="w-full h-40 p-3 border rounded-lg resize-none focus:outline-none focus:ring-2 focus:ring-primary"
                        placeholder="Type your response here..."
                        value={currentResponse}
                        onChange={(e) => setCurrentResponse(e.target.value)}
                      />
                      <div className="flex justify-between items-center">
                        <div className="text-sm text-muted-foreground">{currentResponse.length} characters</div>
                        <Button onClick={submitResponse} disabled={!currentResponse.trim()}>
                          {session.currentQuestionIndex < session.questions.length - 1
                            ? "Next Question"
                            : "Finish Interview"}
                        </Button>
                      </div>
                    </CardContent>
                  </Card>
                </div>

                {/* Sidebar */}
                <div className="space-y-6">
                  {/* Controls */}
                  <Card>
                    <CardHeader>
                      <CardTitle className="text-lg">Interview Controls</CardTitle>
                    </CardHeader>
                    <CardContent className="space-y-3">
                      <div className="flex items-center justify-between">
                        <span className="text-sm">Microphone</span>
                        <Button
                          variant="outline"
                          size="sm"
                          onClick={() => setIsRecording(!isRecording)}
                          className={isRecording ? "bg-red-50 border-red-200" : ""}
                        >
                          {isRecording ? <Mic className="w-4 h-4 text-red-600" /> : <MicOff className="w-4 h-4" />}
                        </Button>
                      </div>
                      <div className="flex items-center justify-between">
                        <span className="text-sm">Camera</span>
                        <Button
                          variant="outline"
                          size="sm"
                          onClick={() => setIsCameraOn(!isCameraOn)}
                          className={isCameraOn ? "bg-green-50 border-green-200" : ""}
                        >
                          {isCameraOn ? (
                            <Camera className="w-4 h-4 text-green-600" />
                          ) : (
                            <CameraOff className="w-4 h-4" />
                          )}
                        </Button>
                      </div>
                    </CardContent>
                  </Card>

                  {/* Progress */}
                  <Card>
                    <CardHeader>
                      <CardTitle className="text-lg">Progress</CardTitle>
                    </CardHeader>
                    <CardContent>
                      <div className="space-y-3">
                        {session.questions.map((q, index) => (
                          <div key={q.id} className="flex items-center gap-2">
                            <div
                              className={`w-3 h-3 rounded-full ${
                                index < session.currentQuestionIndex
                                  ? "bg-green-500"
                                  : index === session.currentQuestionIndex
                                    ? "bg-primary"
                                    : "bg-muted"
                              }`}
                            />
                            <span
                              className={`text-sm ${
                                index === session.currentQuestionIndex ? "font-medium" : "text-muted-foreground"
                              }`}
                            >
                              Question {index + 1}
                            </span>
                          </div>
                        ))}
                      </div>
                    </CardContent>
                  </Card>
                </div>
              </div>
            </>
          )}

          {step === "feedback" && session && (
            <>
              {/* Feedback Header */}
              <div className="text-center mb-8">
                <h1 className="text-3xl font-bold mb-2">Interview Complete!</h1>
                <p className="text-muted-foreground">Here's your performance analysis and feedback</p>
              </div>

              <div className="space-y-6">
                {/* Overall Score */}
                <Card className="shadow-lg">
                  <CardHeader>
                    <CardTitle className="flex items-center gap-2">
                      <Star className="w-6 h-6" />
                      Overall Performance
                    </CardTitle>
                  </CardHeader>
                  <CardContent>
                    <div className="flex items-center gap-6 mb-6">
                      <div className="text-center">
                        <div className="text-4xl font-bold text-primary mb-1">{mockFeedback.overallScore}/100</div>
                        <div className="text-sm text-muted-foreground">Overall Score</div>
                      </div>
                      <div className="flex-1">
                        <div className="flex justify-between text-sm mb-2">
                          <span>Interview Performance</span>
                          <span>{mockFeedback.overallScore}%</span>
                        </div>
                        <Progress value={mockFeedback.overallScore} className="h-3" />
                        <div className="text-sm text-muted-foreground mt-1">
                          {mockFeedback.overallScore >= 80
                            ? "Excellent performance!"
                            : mockFeedback.overallScore >= 60
                              ? "Good performance with room for improvement"
                              : "Needs significant improvement"}
                        </div>
                      </div>
                    </div>

                    <div className="grid md:grid-cols-2 gap-6">
                      <Card className="border-green-200 bg-green-50">
                        <CardHeader className="pb-3">
                          <CardTitle className="text-lg text-green-700 flex items-center gap-2">
                            <CheckCircle className="w-5 h-5" />
                            Strengths
                          </CardTitle>
                        </CardHeader>
                        <CardContent>
                          <ul className="space-y-2">
                            {mockFeedback.strengths.map((strength, index) => (
                              <li key={index} className="flex items-start gap-2 text-sm">
                                <CheckCircle className="w-3 h-3 text-green-600 mt-0.5 flex-shrink-0" />
                                {strength}
                              </li>
                            ))}
                          </ul>
                        </CardContent>
                      </Card>

                      <Card className="border-blue-200 bg-blue-50">
                        <CardHeader className="pb-3">
                          <CardTitle className="text-lg text-blue-700 flex items-center gap-2">
                            <AlertCircle className="w-5 h-5" />
                            Areas for Improvement
                          </CardTitle>
                        </CardHeader>
                        <CardContent>
                          <ul className="space-y-2">
                            {mockFeedback.improvements.map((improvement, index) => (
                              <li key={index} className="flex items-start gap-2 text-sm">
                                <Lightbulb className="w-3 h-3 text-blue-600 mt-0.5 flex-shrink-0" />
                                {improvement}
                              </li>
                            ))}
                          </ul>
                        </CardContent>
                      </Card>
                    </div>
                  </CardContent>
                </Card>

                {/* Question-by-Question Feedback */}
                <Card className="shadow-lg">
                  <CardHeader>
                    <CardTitle>Question-by-Question Analysis</CardTitle>
                    <CardDescription>Detailed feedback for each question</CardDescription>
                  </CardHeader>
                  <CardContent className="space-y-4">
                    {mockFeedback.questionScores.map((score, index) => {
                      const question = session.questions.find((q) => q.id === score.questionId)
                      if (!question) return null

                      return (
                        <Card key={score.questionId} className="border-l-4 border-l-primary">
                          <CardContent className="p-4">
                            <div className="flex items-center justify-between mb-2">
                              <h4 className="font-medium">Question {index + 1}</h4>
                              <Badge variant="outline">{score.score}/100</Badge>
                            </div>
                            <p className="text-sm text-muted-foreground mb-2">{question.question}</p>
                            <p className="text-sm">{score.feedback}</p>
                          </CardContent>
                        </Card>
                      )
                    })}
                  </CardContent>
                </Card>

                {/* Actions */}
                <div className="flex justify-center gap-4">
                  <Button onClick={restartInterview} variant="outline">
                    Practice Again
                  </Button>
                  <Link href="/dashboard">
                    <Button>Back to Dashboard</Button>
                  </Link>
                </div>
              </div>
            </>
          )}
        </div>
      </div>
    </div>
  )
}
